<resources>
    <string name="app_name">Smart Class</string>
    <string name="action_settings">Settings</string>
    <string name="action_help">Help</string>
    <string name="action_about">About</string>
    <string name="title_activity_array">ArrayActivity</string>

    <string name="title_activity_linked_list">LinkedList</string>
    <string name="title_activity_stack">StackActivity</string>
    <string name="title_activity_queue">Queue</string>
    <string name="title_activity_tree">Tree</string>


    <!--Array 1d Activity-->
    <string name="title_activity_array1_dtheory">Array</string>

    <string name="array_1d_title_1">What is Array?</string>
    <string name="array_1d_text_1">An array data structure, is a data structure consisting of a collection of elements, each identified by at least one array index or key.</string>
    <string name="array_1d_text_dis_1">(source: Wikipedia)</string>
    <string name="array_1d_title_2">NODE structure:</string>
    <string name="array_1d_text_2">Each node of array contains actual datatype information. (integer here).</string>
    <string name="array_1d_text_dis_2">*for better understanding, ‘Smart Class’ uses a node with index number, data element, virtual address as a single node.*</string>
    <string name="array_1d_title_3">Declaration/Syntax:</string>
    <string name="array_1d_text_3">&#8226; datatype arrayName[size];</string>
    <string name="array_1d_text_dis_3">Ex: int arr[4];</string>
    <string name="array_1d_title_4">Advantages:</string>
    <string name="array_1d_text_4">&#8226;	Least possible memory is consumed for data storage compared to all other data structures.\n&#8226;	Accessing elements is easy and efficient.</string>
    <string name="array_1d_text_dis_4"> </string>
    <string name="array_1d_title_5">Disadvantages:</string>
    <string name="array_1d_text_5">&#8226; Static size of array\n</string>
    <string name="array_1d_text_dis_5">Dynamic array can be a ulternative</string>
    <string name="array_1d_title_6">Complexity:</string>
    <string name="array_1d_text_6">&#8226; Insert at End: O(1)\n&#8226; Insert at Begin: O(n)\n&#8226; Insert in between: O(n)\n&#8226; Delete from End: O(1)\n&#8226; Delete from Begin: O(n)\n&#8226; Delete in betn: O(n)</string>
    <string name="array_1d_text_dis_6">Thus, Array is not feasible to use, when deletion of data is caried out frequently</string>

    <!--Single Linked List Activity-->
    <string name="title_activity_linked_list_theory">Linked List</string>

    <string name="linkedlist_single_title_1">What is LinkList?</string>
    <string name="linkedlist_single_text_1">A linked list is a data structure consisting of a group of nodes which together represent a sequence. Under the simplest form, each node is composed of data and a reference (in other words, a link) to the next node in the sequence.</string>
    <string name="linkedlist_single_text_dis_1">(source: Wikipedia)</string>
    <string name="linkedlist_single_title_2">NODE structure:</string>
    <string name="linkedlist_single_text_2">Each node is divided into two parts:\n&#8226; Data Element(s).\n&#8226; Link field, contains the address of next node.</string>
    <string name="linkedlist_single_text_dis_2">The pointer of the last node points to null value(xxxx).</string>
    <string name="linkedlist_single_title_3">Declaration/Syntax:</string>
    <string name="linkedlist_single_text_3"> typedef struct node {\n   datatype data;\n   struct node * next_data_address;\n } linklist_node;</string>
    <string name="linkedlist_single_text_dis_3"> typedef struct node {\n   int number;\n   struct node * next;\n } ll_node;</string>
    <string name="linkedlist_single_title_4">Advantages:</string>
    <string name="linkedlist_single_text_4">&#8226; List can grow or shrink in size during runtime.\n&#8226; Memory utilization is efficient if data length is large and varying</string>
    <string name="linkedlist_single_text_dis_4"> </string>
    <string name="linkedlist_single_title_5">Disadvantages:</string>
    <string name="linkedlist_single_text_5">&#8226; No direct access to Element.\n&#8226; Large Memory Overhead for small size list.</string>
    <string name="linkedlist_single_text_dis_5"> </string>
    <string name="linkedlist_single_title_6">Complexity:</string>
    <string name="linkedlist_single_text_6">&#8226; Add/delete at/from begin: O(1)\n&#8226; Add/delete at/from end: O(n)\n&#8226; Add/delete in between: O(n).</string>
    <string name="linkedlist_single_text_dis_6"> </string>


    <!--Stack Activity-->
    <string name="title_activity_stack_theory">Stack Theory</string>

    <string name="stack_title_1">What is Stack?</string>
    <string name="stack_text_1">A stack or LIFO (last in, first out) is a linear data structure that serves as a collection of elements, with two principal operations: push, which adds an element to the collection, and pop, which removes the last element that was added from Collection.</string>
    <string name="stack_text_dis_1">(source: Wikipedia)</string>
    <string name="stack_title_2">NODE structure:</string>
    <string name="stack_text_2">Generally, Stack is implemented using LinkList Data Structure.</string>
    <string name="stack_text_dis_2"> </string>
    <string name="stack_title_3">Basic operations:</string>
    <string name="stack_text_3">&#8226; Push(data);\n&#8226; pop();\n&#8226; stacktop();</string>
    <string name="stack_text_dis_3">&#8226; Push inserts data on top in the collection.\n&#8226; pop removes data at top.\n&#8226; stacktop retrieves data from top node</string>
    <string name="stack_title_4">Real Life Example:</string>
    <string name="stack_text_4">&#8226; Expression Evaluation/ Conversion.\n&#8226; Recursion.\n&#8226; Arithmetic expression evaluation.\n&#8226; Compilers use stack internally.\n&#8226; Java Virtual Machine uses a stack.</string>
    <string name="stack_text_dis_4">source:\n&#8226; ppt\'s from Prof. Dr. Smriti H. Bhandari.\n&#8226; quora.com</string>


    <!--Queue Activity-->
    <string name="title_activity_queue_theory">Queue Theory</string>

    <string name="queue_simple_title_1">What is Queue?</string>
    <string name="queue_simple_text_1">A queue or FIFO (First-In-First-Out) is a linear data structure that serves as a collection of elements, with two principal operations: enqueue, which adds an element to the collection, and dequeue, which removes the first element that was added in Collection.</string>
    <string name="queue_simple_text_dis_1">(source: Wikipedia)</string>
    <string name="queue_simple_title_2">NODE structure:</string>
    <string name="queue_simple_text_2">Generally, Queue is implemented using LinkList Data Structure.</string>
    <string name="queue_simple_text_dis_2"> </string>
    <string name="queue_simple_title_3">Basic operations:</string>
    <string name="queue_simple_text_3">&#8226; enqueue(data);\n&#8226; dequeue();\n&#8226; queuefront();\n&#8226; queuerear();</string>
    <string name="queue_simple_text_dis_3">&#8226; enqueue inserts data at rear in the collection.\n&#8226; dequeue removes data from front.\n&#8226; queuefront retrieves data from queue front.\n&#8226; queuerear retrieves data from queue rear.</string>
    <string name="queue_simple_title_4">Real Life Example:</string>
    <string name="queue_simple_text_4">&#8226; OS uses queue to schedule CPU jobs.\n&#8226;	Calculator.\n&#8226; Memory Buffer uses queue.\n&#8226; Digestion. ;).</string>
    <string name="queue_simple_text_dis_4">source:\n&#8226; ppt\'s from Prof. Dr. Smriti H. Bhandari.\n&#8226; stackexchange.com</string>
    <string name="title_activity_about">Dream Team</string>

</resources>

    <!--
    <string name="_title_1">What is DS?</string>
    <string name="_text_1">.</string>
    <string name="_text_dis_1">(source: Wikipedia)</string>
    <string name="_title_2">NODE structure:</string>
    <string name="_text_2"></string>
    <string name="_text_dis_2"></string>
    <string name="_title_3">Declaration/Syntax:</string>
    <string name="_text_3">&#8226; </string>
    <string name="_text_dis_3">Ex: </string>
    <string name="_title_4">Advantages:</string>
    <string name="_text_4">&#8226; A.\n&#8226;	B.</string>
    <string name="_text_dis_4">**</string>
    <string name="_title_5">Disadvantages:</string>
    <string name="_text_5">&#8226; A.\n&#8226;	B.</string>
    <string name="_text_dis_5">**</string>
    <string name="_title_6">Complexity:</string>
    <string name="_text_6">&#8226; Insert at End: O(1)\n&#8226; Insert at Begin: O(n)\n&#8226; Insert in between: O(n)\n&#8226; Delete from End: O(1)\n&#8226; Delete from Begin: O(n)\n&#8226; Delete in betn: O(n)</string>
    <string name="_text_dis_6">**</string>
-->